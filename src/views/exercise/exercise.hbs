<style>
    #drop-area {
        border: 2px dashed #ccc;
        background: #f8f8f8;
        width: 100%;
        font-family: sans-serif;
        _margin: 100px auto;
        padding: 15px;
    }

    #drop-area.highlight {
        border-color: purple;
    }

    p {
        margin-top: 0;
    }

    ._my-form {
        margin-bottom: 10px;
    }

    #gallery {
        _margin-top: 10px;
    }

    #gallery img {
        width: 150px;
        margin-bottom: 10px;
        margin-right: 10px;
        vertical-align: middle;
    }

    .button {
        display: inline-block;
        padding: 2px 10px;
        background: #e7f3ff;
        cursor: pointer;
        border-radius: 3px;
        border: 1px solid #ccc;
        color: #1876f2;
    }

    .button:hover {
        background: #e4ebf1;
    }

    #fileElem {
        display: none;
    }
</style>

<nav aria-label="breadcrumb">
    <ol class="breadcrumb">
        {{!-- <li class="breadcrumb-item"><a href="/"><i class="fas fa-home"></i></a></li> --}}
        <li class="breadcrumb-item"><a href="/">Acasă</a></li>
        <li class="breadcrumb-item"><a href="/exercitii">Exerciții</a></li>
        <li class="breadcrumb-item active" aria-current="page">E.{{exercise.code}}</li>
    </ol>
</nav>


{{!-- <h1>Exercițiul {{exercise.code}}</h1> --}}


<div style="border: 1px solid #bb815d; padding: 6px 12px; background-color: #fff9f8; min-height:58px">
    {{{exercise.question.statement.textPreview}}}
</div>
<div class="font-italic small text-right text-muted">{{exercise.contestName}}</div>
<div class="font-italic small text-right text-muted">{{exercise.sourceName}}</div>


{{#if exercise.question.answer}}
<div>
    <button id="toggle-answer-btn" type="button" class="btn btn-link p-0">Rezultat final</button>
</div>
<div id="answer-div" class="d-none">
    {{{exercise.question.answer.textPreview}}}
</div>
{{/if}}


{{#if exercise.question.hints}}
<div>
    <button id="toggle-hints-btn" type="button" class="btn btn-link p-0">Indicații
    </button>
    <span class="align-middle text-muted">({{exercise.question.hints.length}})</span>
    {{!-- <span class="align-middle text-muted ml-2 mr-2">|</span>
    <button id2="toggle-hints-btn" type="button" class="btn btn-link p-0">Vezi următoarea indicație
    </button> --}}
</div>
<div id="hints-div" class="d-none mb-4" data-total-hints="{{exercise.question.hints.length}}"
    style="border: 1px solid #007bff; padding: 6px 12px; background-color: #f5faff; min-height:58px">
    {{#each exercise.question.hints}}
    <div {{#if (ne @index 0)}} class="d-none" {{/if}} data-hint-nr="{{inc @index}}">{{{textPreview}}}</div>
    {{/each}}
    {{#if (gt exercise.question.hints.length 1)}}
    <button id="show-next-hint-btn" type="button" class="btn btn-link p-0">Vezi următoarea indicație</button>
    {{/if}}
</div>
{{/if}}


{{#if exercise.question.solution}}
<div>
    <button id="toggle-solution-btn" type="button" class="btn btn-link p-0">Rezolvare completă</button>
</div>
<div id="solution-div" class="d-none"
    style="border: 1px solid #008000; padding: 6px 12px; background-color: #f5fff5; min-height:58px">
    {{{exercise.question.solution.textPreview}}}
</div>
{{/if}}




<div>
    <a href="/exercitii/{{exercise._id}}/print">Varianta tipăribilă</a>
    <i class="fas fa-print text-muted" aria-hidden="true"></i>
</div>

{{#if canCreateOrEditExercise}}
<a href="/exercitii/edit/{{exercise._id}}">Edit</a>
{{/if}}

{{!-- <hr> --}}


<div class="mt-4">Rezolvarea ta:</div>
<div id="drop-area">
    <form class="my-form">

        <div class="form-group">
            <input type="file" id="fileSelectInput" multiple accept="image/*" class="d-none form-control">
            <label class="button" for="fileSelectInput">
                <i class="fas fa-paperclip"></i>
                Adaugă poza
            </label>

            <span class="text-muted font-weight-light">sau trage poza aici</span>

            <div id="fileSelectInputErr" class="invalid-feedback">Mesaj de eroare</div>


        </div>



        <progress id="progress-bar" class="d-none  w-100" max=100 value=0></progress>

        <div id="gallery"></div>

        <div class="form-group mt-2">
            {{!-- <label for="answer-editor-txt" class="mt-2 mb-0 text-muted font-weight-light"> Comentariu (opțional):
            </label> --}}

            <textarea id="answer-editor-txt" rows="2" name="answer" placeholder="Comentariu (opțional)..."
                style="border-radius:0; border-color:#ccc"
                class="form-control {{#if errors.lastName}}is-invalid {{/if}} {{#if isEditMode}}d-none{{/if}}"></textarea>
            <div class="invalid-feedback">{{errors.answer.msg}}</div>


        </div>

        <div class="form-group mb-0">
            <button type="button" id="fileSelectBtn" class="btn btn-primary btn-sm mt-3w">
                <i class="fas fa-paper-plane"></i>
                Trimite rezolvarea
            </button>
        </div>

    </form>

</div>






{{#section 'script'}}
<script type="module" src="/js/exercise/exercise.main.js"></script>
{{/section}}

{{#section 'script-after'}}
<script>

    function handleFiles1() {
        const files = this.files; /* now you can work with the file list */
        handleFiles(files);
    }

    const fileSelectInput = document.getElementById("fileSelectInput");
    //const fileSelectBtn = document.getElementById("fileSelectBtn");

    //fileSelectBtn.addEventListener("click", function (e) {
    //    if (fileSelectInput) {
    //        fileSelectInput.click();
    //    }
    //    e.preventDefault(); // prevent navigation to "#"
    //}, false);

    fileSelectInput.addEventListener("change", handleFiles1, false);

    let dropArea = document.getElementById('drop-area');

    //dropArea.addEventListener('dragenter', handlerFunction, false)
    //dropArea.addEventListener('dragleave', handlerFunction, false)
    //dropArea.addEventListener('dragover', handlerFunction, false)
    //dropArea.addEventListener('drop', handlerFunction, false)

    ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
        dropArea.addEventListener(eventName, preventDefaults, false);
    });
    function preventDefaults(e) {
        e.preventDefault();
        e.stopPropagation();
    }

    ['dragenter', 'dragover'].forEach(eventName => {
        dropArea.addEventListener(eventName, highlight, false);
    });

    ['dragleave', 'drop'].forEach(eventName => {
        dropArea.addEventListener(eventName, unhighlight, false);
    });

    function highlight(e) {
        dropArea.classList.add('highlight');
    }

    function unhighlight(e) {
        dropArea.classList.remove('highlight');
    }

    dropArea.addEventListener('drop', handleDrop, false)

    function handleDrop(e) {
        let dt = e.dataTransfer;
        let files = dt.files;

        handleFiles(files);
    }

    //files is not an array, but a FileList. So, we’ll need to convert it to an array.
    function handleFiles(files) {
        files = [...files];

        const validationFilesMessage = getValidationFilesMessage(files);
        const fileSelectInput = document.getElementById("fileSelectInput");
        if (validationFilesMessage) {
            fileSelectInput.classList.add("is-invalid");
            document.getElementById("fileSelectInputErr").innerHTML = validationFilesMessage;
            return false;
        } else {
            fileSelectInput.classList.remove("is-invalid");
        }

        initializeProgress(files.length); // <- Add this line



        // files.forEach(uploadFile);
        uploadFiles(files);

        //files.forEach(previewFile);
    }

    function getValidationFilesMessage(files) {
        if (files.length > 3) return "Poți adăuga maxim 3 poze!";

        let isFileSizeValid = true;
        let isFileTypeValid = true;
        files.forEach(file => {
            if (file.size > 7 * 1024 * 1024) isFileSizeValid = false;
            if (!file.type.startsWith('image/')) isFileTypeValid = false;
        });

        if (!isFileSizeValid) return "O poză poate avea maxim 5 MB!";
        if (!isFileTypeValid) return "Poți adăuga doar poze ('.jpeg / .png')!";

        return undefined;

    }

    function uploadFile(file, i) { // <- Add `i` parameter
        var url = '/uploadfile';
        var xhr = new XMLHttpRequest();
        var formData = new FormData();

        //xhr.responseType = 'json';

        xhr.open('POST', url, true);

        // Add following event listener
        xhr.upload.addEventListener("progress", function (e) {
            updateProgress(i, (e.loaded * 100.0 / e.total) || 100);
        })

        xhr.addEventListener('readystatechange', function (e) {
            if (xhr.readyState == 4 && xhr.status == 200) {
                // Done. Inform the user
                console.log("done:");
                console.log(e);

                previewFileNew(file);
            }
            else if (xhr.readyState == 4 && xhr.status != 200) {
                // Error. Inform the user
            }
        })

        // log response
        xhr.onload = () => {
            console.log("done onload:");
            console.log(xhr.responseText);
        };

        formData.append('file', file);
        xhr.send(formData);
    }

    function uploadFiles(files) { // <- Add `i` parameter
        var url = '/uploadfile';
        var xhr = new XMLHttpRequest();
        var formData = new FormData();

        //xhr.responseType = 'json';

        xhr.open('POST', url, true);

        // Add following event listener
        xhr.upload.addEventListener("progress", function (e) {
            //updateProgress(i, (e.loaded * 100.0 / e.total) || 100);
            updateProgress2((e.loaded * 100.0 / e.total) || 100);
        })

        xhr.addEventListener('readystatechange', function (e) {
            if (xhr.readyState == 4 && xhr.status == 200) {
                // Done. Inform the user
                //console.log("done:");
                //console.log(e);

                previewFileNew("aaa");
            }
            else if (xhr.readyState == 4 && xhr.status != 200) {
                // Error. Inform the user
            }
        })

        // log response
        xhr.onload = () => {
            console.log("done onload:");
            console.log(xhr.responseText);
        };

        files.forEach(file => {
            formData.append('file', file);
        });

        xhr.send(formData);
    }


    function previewFile(file) {
        let reader = new FileReader();
        reader.readAsDataURL(file);
        reader.onloadend = function () {
            let img = document.createElement('img');
            img.src = reader.result;
            document.getElementById('gallery').appendChild(img);
        }
    }

    function previewFileNew(file) {
        //alert(123);
        let img = document.createElement('img');
        img.src = "https://matemaratondev.blob.core.windows.net/homework-submissions/11-marcel-37KB.jpg";
        document.getElementById('gallery').appendChild(img);
    }

    //let filesDone = 0;
    //let filesToDo = 0;
    let uploadProgress = [];

    let progressBar = document.getElementById('progress-bar');

    //function initializeProgress(numfiles) {
    //    progressBar.value = 0;
    //    filesDone = 0;
    //    filesToDo = numfiles;
    //}

    //function progressDone() {
    //    filesDone++;
    //    progressBar.value = filesDone / filesToDo * 100;
    //}

    function initializeProgress(numFiles) {
        progressBar.classList.remove("d-none");
        progressBar.value = 0;
        uploadProgress = [];

        for (let i = numFiles; i > 0; i--) {
            uploadProgress.push(0);
        }
    }

    function updateProgress(fileNumber, percent) {
        uploadProgress[fileNumber] = percent;
        let total = uploadProgress.reduce((tot, curr) => tot + curr, 0) / uploadProgress.length;
        progressBar.value = total;
    }

    function updateProgress2(percent) {
        //uploadProgress[fileNumber] = percent;
        //let total = uploadProgress.reduce((tot, curr) => tot + curr, 0) / uploadProgress.length;
        progressBar.value = percent;
        if (percent == 100) progressBar.classList.add("d-none");
    }



</script>
{{/section}}